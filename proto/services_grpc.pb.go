// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostsAPIClient is the client API for PostsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsAPIClient interface {
	GetPosts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListOfPosts, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*Post, error)
}

type postsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsAPIClient(cc grpc.ClientConnInterface) PostsAPIClient {
	return &postsAPIClient{cc}
}

func (c *postsAPIClient) GetPosts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListOfPosts, error) {
	out := new(ListOfPosts)
	err := c.cc.Invoke(ctx, "/services.PostsAPI/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsAPIClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/services.PostsAPI/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostsAPIServer is the server API for PostsAPI service.
// All implementations must embed UnimplementedPostsAPIServer
// for forward compatibility
type PostsAPIServer interface {
	GetPosts(context.Context, *empty.Empty) (*ListOfPosts, error)
	CreatePost(context.Context, *CreatePostRequest) (*Post, error)
	mustEmbedUnimplementedPostsAPIServer()
}

// UnimplementedPostsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPostsAPIServer struct {
}

func (UnimplementedPostsAPIServer) GetPosts(context.Context, *empty.Empty) (*ListOfPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedPostsAPIServer) CreatePost(context.Context, *CreatePostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostsAPIServer) mustEmbedUnimplementedPostsAPIServer() {}

// UnsafePostsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsAPIServer will
// result in compilation errors.
type UnsafePostsAPIServer interface {
	mustEmbedUnimplementedPostsAPIServer()
}

func RegisterPostsAPIServer(s grpc.ServiceRegistrar, srv PostsAPIServer) {
	s.RegisterService(&PostsAPI_ServiceDesc, srv)
}

func _PostsAPI_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsAPIServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.PostsAPI/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsAPIServer).GetPosts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsAPI_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsAPIServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.PostsAPI/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsAPIServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostsAPI_ServiceDesc is the grpc.ServiceDesc for PostsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.PostsAPI",
	HandlerType: (*PostsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPosts",
			Handler:    _PostsAPI_GetPosts_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PostsAPI_CreatePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services.proto",
}

// UsersAPIClient is the client API for UsersAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersAPIClient interface {
	GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListOfUsers, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
}

type usersAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersAPIClient(cc grpc.ClientConnInterface) UsersAPIClient {
	return &usersAPIClient{cc}
}

func (c *usersAPIClient) GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListOfUsers, error) {
	out := new(ListOfUsers)
	err := c.cc.Invoke(ctx, "/services.UsersAPI/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersAPIClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/services.UsersAPI/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersAPIServer is the server API for UsersAPI service.
// All implementations must embed UnimplementedUsersAPIServer
// for forward compatibility
type UsersAPIServer interface {
	GetUsers(context.Context, *empty.Empty) (*ListOfUsers, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	mustEmbedUnimplementedUsersAPIServer()
}

// UnimplementedUsersAPIServer must be embedded to have forward compatible implementations.
type UnimplementedUsersAPIServer struct {
}

func (UnimplementedUsersAPIServer) GetUsers(context.Context, *empty.Empty) (*ListOfUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUsersAPIServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersAPIServer) mustEmbedUnimplementedUsersAPIServer() {}

// UnsafeUsersAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersAPIServer will
// result in compilation errors.
type UnsafeUsersAPIServer interface {
	mustEmbedUnimplementedUsersAPIServer()
}

func RegisterUsersAPIServer(s grpc.ServiceRegistrar, srv UsersAPIServer) {
	s.RegisterService(&UsersAPI_ServiceDesc, srv)
}

func _UsersAPI_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersAPIServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UsersAPI/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersAPIServer).GetUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersAPI_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersAPIServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.UsersAPI/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersAPIServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersAPI_ServiceDesc is the grpc.ServiceDesc for UsersAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.UsersAPI",
	HandlerType: (*UsersAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _UsersAPI_GetUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UsersAPI_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services.proto",
}
